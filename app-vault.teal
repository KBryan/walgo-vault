#pragma version 2

// Parameters
// - TMPL_ASA_ID: asset id of wALGO
// - TMPL_VAULT_TEAL_PREFIX: initial part of the vault.teal Program (see Readme.md)
// - TMPL_VAULT_TEAL_SUFFIX: ending part of the vault.teal Program (see Readme.md)

// Global Vars:
// position 2: is registered
// position 3: Vault address (no Admin operations)
// position 4: Admin address
// position 6: temporary variable
// position 7: temporary variable
// position 8: temporary variable
// position 9: temporary variable

// check if the app is being created
// if so save creator
int 0
txn ApplicationID
==
bz not_creation

/////////////////////////////////////////////////////////////////////
// BEGIN: Creation of the app
// ==========================
// Admin -> createApp: args []
//

global GroupSize
int 1
==
bz failed

// Save Creator
byte "A" // Admin
txn Sender
app_global_put

// by default Minter = Owner
byte "MA" // MintAccount
txn Sender
app_global_put

// GS (GlobalStatus) starts disabled

b success

//
// END: Creation of the app
//
/////////////////////////////////////////////////////////////////////

not_creation:
// is it an admin action
byte "A" // Admin
app_global_get

dup
store 4
txn Sender
==
bz no_admin

/////////////////////////////////////////////////////////////////////
// BEGIN: ADMIN SECTION
// ====================
//

// all Admin operations GroupSize == 1
global GroupSize
int 1
==
bz failed

// Handle each possible OnCompletion type for admin

txn OnCompletion
int DeleteApplication
==
bnz success

txn OnCompletion
int UpdateApplication
==
bnz success

txn OnCompletion
int NoOp
==
bnz admin_handle_noop

// OnCompletion value is either OptIn, CloseOut, or ClearState
// This is forbidden as admin, as admin is the creator
err

// Handle Admin NoOp
// -----------------
admin_handle_noop:

txna ApplicationArgs 0
byte "iA" // initializeApp
==
bnz admin_initialize

txna ApplicationArgs 0
byte "sGS" // setGlobalStatus
==
bnz admin_set_global_status

txna ApplicationArgs 0
byte "sMA" // setMintAccount
==
bnz admin_set_mint_account

txna ApplicationArgs 0
byte "sAA" // setAdminAccount
==
bnz admin_set_admin_account

txna ApplicationArgs 0
byte "sAS" // setAccountStatus
==
bnz admin_set_account_status

txna ApplicationArgs 0
byte "sMF" // setMintFee
==
bnz admin_set_mint_fee

txna ApplicationArgs 0
byte "sBF" // setBurnFee
==
bnz admin_set_burn_fee

txna ApplicationArgs 0
byte "sCF" // setCreationFee
==
bnz admin_set_creation_fee

// Unknown action

err

// Handle initialize
// -----------------
// Admin -> initialize: args ['i', ASA_ID, VAULT_PREFIX, VAULT_SUFFIX]
admin_initialize:

byte "ASA" // Asset ID
txna ApplicationArgs 1
btoi
app_global_put

byte "Pr" // vault.teal Prefix
txna ApplicationArgs 2
app_global_put

byte "Su" // vault.teal Suffix
txna ApplicationArgs 3
app_global_put

b success

// End initialize
/////////////////////////////////////////////////////////////////////

// Handle setGlobalStatus
// -----------------
// Admin -> setGlobalStatus: args ['sGS', 0|1]
admin_set_global_status:

txna ApplicationArgs 1
btoi

dup
store 8

// GlobalStatus can be 0 or 1
int 0
==
load 8
int 1
==
||
bz failed

byte "GS" // GlobalStatus
load 8
app_global_put

b success

// End setGlobalStatus
/////////////////////////////////////////////////////////////////////


// Handle setMintAccount
// -----------------
// Admin -> setMintAccount: args ['sMA'] accounts: [New Mint account]
admin_set_mint_account:

byte "MA" // MintAccount
txn Accounts 1
app_global_put

b success

// End setMintAccount
/////////////////////////////////////////////////////////////////////


// Handle setAdminAccount
// -----------------
// Admin -> setAdminAccount: args ['sAA'] accounts: [New Admin]
admin_set_admin_account:

byte "A" // Admin
txn Accounts 1
app_global_put

b success

// End setAdminAccount
/////////////////////////////////////////////////////////////////////



// Handle setAccountStatus
// -----------------
// Admin -> setAccountStatus: args ['s', 0|1] accounts: [account to enable/disable]
admin_set_account_status:

txna ApplicationArgs 1
btoi

dup
store 8

// status can be 0 or 1
int 0
==
load 8
int 1
==
||
bz failed

int 1
byte "s" // status
load 8
app_local_put

b success

// End setAccountStatus
/////////////////////////////////////////////////////////////////////

// Handle setMintFee
// -----------------
// Admin -> setMintFee: args ['sMF', 0-5000]
admin_set_mint_fee:

txna ApplicationArgs 1
btoi

dup
store 8

// mint fee between 0 and 5000 (0%-50%)
load 8
int 5000
<=
bz failed

byte "MF" // MintFee
load 8
app_global_put

b success

// End setMintFee
/////////////////////////////////////////////////////////////////////


// Handle setBurnFee
// -----------------
// Admin -> setBurnFee: args ['sBF', 0-5000]
admin_set_burn_fee:

txna ApplicationArgs 1
btoi

dup
store 8

// burn fee between 0 and 5000 (0%-50%)
load 8
int 5000
<=
bz failed

byte "BF" // BurnFee
load 8
app_global_put

b success

// End setBurnFee
/////////////////////////////////////////////////////////////////////

// Handle setCreationFee
// -----------------
// Admin -> setCreationFee: args ['sCF', int (microALGOs)]
admin_set_creation_fee:

byte "CF" // BurnFee
txna ApplicationArgs 1
btoi
app_global_put

b success

// End setCreationFee
/////////////////////////////////////////////////////////////////////

//
// END: ADMIN SECTION
// ====================
/////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////
// BEGIN: ACCOUNT SECTION
// ====================
//

no_admin:

// Fail is GlobalStatus = 0
byte "GS" // GlobalStatus
app_global_get
bz failed

// OptIn
int OptIn
txn OnCompletion
==
bnz no_admin_opt_in

// Pre-requisites for account operations:
// all operations have 2 txs and account must be registered
// Registered(Sender) && Status(account) == enabled

int 0
txn ApplicationID
byte "v" // vault
app_local_get_ex
// registered?
bz failed

// store Vault address
store 3

// verify if the Account status is enabled
int 0
byte "s" // status
app_local_get

bz failed 

// CloseOut
int CloseOut
txn OnCompletion
==
bnz no_admin_close_out

// avoid users to call any other operations that are not NoOp, especially admin operations such as Update and Delete
txn OnCompletion
int NoOp
==
bz failed

load 3
txn Accounts 1
==
bz failed

txna ApplicationArgs 0
byte "mw" // mintwALGOs
==
bnz no_admin_mint_walgos

txna ApplicationArgs 0
byte "wA" // withdrawALGOs
==
bnz no_admin_withdraw_algos

txna ApplicationArgs 0
byte "bw" // burnwALGOs
==
bnz no_admin_burn_walgos


// unknown operation
err

// Handle OptIn
// -----------------
// account -> optIn: args [] accounts: [vaultAddr]
no_admin_opt_in:

// GroupSize == 1 && CreationFee == 0 || GroupSize == 2 && CreationFee > 0
global GroupSize
int 1
==
int 0
byte "CF"
app_global_get
dup
store 8
==
&&
bnz optin_no_creation_fee

global GroupSize
int 2
==
// creation fee != 0
load 8
int 0
>
&&

bz failed

// tx1.TypeEnum == pay && tx1.Receiver == Admin && tx1.Amount >= CreationFee
gtxn 1 TypeEnum
int pay
==

// Receiver account == Admin
gtxn 1 Receiver 
load 4
==
&&

// amount sent == CreationFee
gtxn 1 Amount
load 8
>=
&&

bz failed

optin_no_creation_fee:

// if balance > 0 is allowed on creation, the user can call ClearState, reset the amount minted and withdraw the Algos without
// returning the wALGOs
int 1
balance
int 0
==
bz failed

// Calculate the TEAL code Address generated with the vault.teal specialized in the Sender address that 
// corresponds to the Sender account Vault
byte "Program"
// Prefix (see README.md)
byte "Pr"
app_global_get

concat

txn Sender
concat

// Suffix (see README.md)
byte "Su"
app_global_get
concat

sha512_256

dup
store 8

// verify that we are verifying the balance of the same account
txn Accounts 1
==
bz failed

// assign the Vault address to the account
int 0
byte "v" // vault
load 8
app_local_put

// account -> setAccountStatus: args ['s', 1|0]
int 0
byte "s" // status
int 1
app_local_put

b success

// End OptIn
/////////////////////////////////////////////////////////////////////


// Handle CloseOut
// -----------------
// account -> CloseOut: args [] accounts: [vaultAddr]
no_admin_close_out:

// Tx0.Accounts[0] is the user account
int 0
store 7

// Position 3: Vault address
// Position 4: Admin address
// Position 7: Index on the Accounts array of the account to close

close_out_account:

// tx0: App CloseOut

// tx1.TypeEnum == pay && GroupSize == 2 && tx1.Sender == VaultAddr && tx1.RekeyTo == ZeroAddress && 
// tx1.Fee == MinTxnFee && 
// tx1.CloseRemainderTo != ZeroAddress && Minted == 0 
// tx1.Receiver == Admin && 
// 
// Payment
gtxn 1 TypeEnum
int pay
==

global GroupSize
int 2
==
&&

// is the same Vault that corresponds to the account sending the ALGOs
load 3
gtxn 1 Sender
==
&&

gtxn 1 RekeyTo
global ZeroAddress
==
&&

gtxn 1 Fee
global MinTxnFee
==
&&

// the Vault is closed so CloseRemainderTo != ZeroAddress
gtxn 1 CloseRemainderTo
global ZeroAddress
!=
&&

// user should burn the algos before CloseOut
load 7
byte "m" // minted
app_local_get

int 0
==
&&

bnz success

err

// End CloseOut
/////////////////////////////////////////////////////////////////////


// Handle mintwALGOs
// -----------------
// account -> mintwALGOs: args ['mw'] accounts: [vaultAddr]
no_admin_mint_walgos:

// tx0: App mintwALGOs
// tx1: ASA transfer from Minter
// tx2: Pay fee to Admin in algos (if MintFee > 0)

// add the fee to owner account
byte "MF"
app_global_get

// store MintFee in Position 9
store 9

// Amount to mint Position 8
gtxn 1 AssetAmount
store 8

// Admin fees
int 0
store 7

// is the same Vault that corresponds to the account
// tx1.Rekey == ZeroAddress &&
// No fee so no 3rd tx
// (GroupSize == 2 && MintFee == 0 || 
// 3rd tx paying the fees. It can be paid from the Vault or from another account
// GroupSize == 3 && MintFee > 0 && tx2.TypeEnum == pay && 
// tx2.Amount == MintFee*tx1.AssetAmount/10000 && tx2.Receiver == AdminAddr && tx2.CloseRemainderTo == ZeroAddress) && 
// tx1.TypeEnum == AssetTransfer &&
// tx1.AssetAmount > 0 && tx1.Sender == MintAccount && tx1.Fee == MinTxnFee && 
// tx1.AssetCloseTo == ZeroAddress && tx1.XferAsset == ASA ID
gtxn 1 RekeyTo
global ZeroAddress
==

// (
global GroupSize
int 2
==

load 9
int 0
==
&&
bnz no_admin_mint_walgos_no_fee

global GroupSize
int 3
==
&&

load 9
int 0
>
&& 

gtxn 2 TypeEnum 
int pay
== 
&&

// calculate Admin fees: AssetAmount * MintFee / 10000
load 8
load 9
*
int 10000
/
dup
store 6

// calculate the total spend in the third tx by the Vault. Verify if the Vault is paying the fees first.
gtxn 2 Sender
load 3
==
bz no_admin_mint_walgos_fee_sender_not_vault

// balanceVaultAfter = balance - tx2.Amount - tx2.Fee
// position 7: tx2.Amount + tx2.Fee
load 6
gtxn 2 Fee
+
store 7

no_admin_mint_walgos_fee_sender_not_vault:

// fees == tx2.Amount
gtxn 2 Amount
==
&&

// tx2.Receiver == AdminAddr
gtxn 2 Receiver
load 4
==
&&

gtxn 2 CloseRemainderTo 
global ZeroAddress
==
&&

// )

no_admin_mint_walgos_no_fee:

// AssetTransfer
gtxn 1 TypeEnum
int axfer
==
&&

// more than 0
gtxn 1 AssetAmount
int 0
>
&&

gtxn 1 Sender
byte "MA" // MintAccount
app_global_get
==
&&

gtxn 1 Fee
global MinTxnFee
==
&&

// no Close
gtxn 1 AssetCloseTo 
global ZeroAddress
==
&&

// ASA_ID
gtxn 1 XferAsset
byte "ASA"
app_global_get
//int TMPL_ASA_ID
==
&&

bz failed

// Minted = Minted + tx1.AssetAmount
int 0
byte "m" // minted
app_local_get

load 8
+
store 6

b put_minted_verify_balance

// End mintwALGOs
/////////////////////////////////////////////////////////////////////



// Handle withdrawALGOs
// -----------------
// account -> withdrawALGOs: args: ['wA'] accounts: [vaultAddr]
no_admin_withdraw_algos:

// tx1: App withdrawALGOs
// tx2: Payment

// GroupSize == 2 && tx1.Sender == VaultAddr && tx1.Rekey == ZeroAddress
// tx1.TypeEnum == pay && tx1.Amount >= 1000 && tx1.Fee == MinTxnFee && 
// tx1.CloseRemainderTo == ZeroAddress
global GroupSize
int 2
==

// is the same Vault that corresponds to the account sending the ALGOs
load 3
gtxn 1 Sender
==
&&

gtxn 1 RekeyTo
global ZeroAddress
==
&&

// Payment
gtxn 1 TypeEnum
int pay
==
&&

// check amounts
gtxn 1 Amount
dup
store 7

// more than 1000 (Minimum Withdrawal)
int 1000
>=
&&

gtxn 1 Fee
global MinTxnFee
==
&&

// no Close
gtxn 1 CloseRemainderTo 
global ZeroAddress
==
&&

bz failed

// minted <= Balance - Amount - tx1.Fee
int 0
byte "m" // minted
app_local_get

int 1
balance
load 7
-
gtxn 1 Fee
//int 1000
-

<=
bnz success

err

// End withdrawALGOs: Go to verify_balance
/////////////////////////////////////////////////////////////////////


// Handle burnwALGOs
// -----------------
// account -> burnwALGOs: args: ['bw']
no_admin_burn_walgos:

// tx0: App BurnwALGOs
// tx1: ASA transfer to Minter
// tx2: Pay fee to Admin in algos (if BurnFee > 0)

// add the fee to owner account
byte "BF"
app_global_get

store 9

// is the same Vault that corresponds to the account
// tx1.TypeEnum == AssetTransfer && 
// (GroupSize == 2 && BurnFee == 0 ||
// 3rd tx paying the fees. It can be paid from the Vault or from another account
// GroupSize == 3 && BurnFee > 0 && tx2.TypeEnum == pay &&
// tx2.Amount == MintFee*tx1.AssetAmount/10000 && tx2.Receiver == AdminAddr && tx2.CloseRemainderTo == ZeroAddress) && 
// tx1.AssetAmount > 0 && 
// tx1.AssetReceiver == MintAccount && tx1.AssetSender != MintAccount && tx1.XferAsset == ASA ID

// AssetTransfer
gtxn 1 TypeEnum
int axfer
==

// (
global GroupSize
int 2
==

load 9
int 0
==
&&
bnz no_admin_burn_walgos_no_fee

global GroupSize
int 3
==
&&

load 9
int 0
>
&& 

gtxn 2 TypeEnum 
int pay
== 
&&

// calculate Admin fees: AssetAmount * MintFee / 10000
gtxn 1 AssetAmount
load 9
*
int 10000
/

gtxn 2 Amount
==
&&

// tx2.Receiver == AdminAddr
gtxn 2 Receiver
load 4
==
&&

gtxn 2 CloseRemainderTo 
global ZeroAddress
==
&&

// Position 7: store the fee if the Sender == VaultAddr 
gtxn 2 Sender
load 3
==
bz no_admin_burn_walgos_no_fee

gtxn 2 Fee
gtxn 2 Amount
+
store 7

// )

no_admin_burn_walgos_no_fee:
// take into account the tx1.Fee because it can be executed from the Vault.
// Position 7 is used to verify that the final Algo balance is above wALGOs minted.
load 7
gtxn 1 Fee
+
store 7

// more than 0
gtxn 1 AssetAmount
int 0
>
&&

// Minter == ASA Receiver
gtxn 1 AssetReceiver
byte "MA" // MintAccount
app_global_get
dup
store 9
==
&&

gtxn 1 AssetSender
load 9
!=
&&

// ASA_ID
gtxn 1 XferAsset
byte "ASA"
app_global_get
//int TMPL_ASA_ID
==
&&

bz failed

int 0
byte "m" // minted
app_local_get


// Minted >= tx1.AssetAmount
// it is not necessary to verify it because if it is the case, the next substraction generates an error 

// Minted = Minted - tx1.AssetAmount
gtxn 1 AssetAmount
-
store 6

// Handle put_minted_verify_balance
// -----------------
// Position 6: new minted value
// Position 7: algos to remove from Vault (fees and payments)
put_minted_verify_balance:

int 0
byte "m" // minted
load 6
app_local_put

// newBalance >= minted
int 1
balance
load 7
-
load 6
>=
bnz success

err


// End burnwALGOs
/////////////////////////////////////////////////////////////////////


//
// END: ACCOUNT SECTION
// ====================
/////////////////////////////////////////////////////////////////////

failed:
int 0
return

success:
int 1
return