#pragma version 2

// position 0: isAdmin
// position 1: GlobalStatus


// check if the app is being created
// if so save creator
int 0
txn ApplicationID
==
bz not_creation

// Create Application -> Save Creator
txn NumAppArgs
int 0
==
bz failed

byte "Creator"
txn Sender
app_global_put
//0 args must be used on creation

// by default Minter = Creator
byte "Minter"
txn Sender
app_global_put

int 1
return

not_creation:
// is it an admin action
byte "Creator"
app_global_get
txn Sender
==

// position 0 == isAdmin
store 0

byte "GlobalStatus"
app_global_get

// position 1 == GlobalStatus
store 1

load 0
bz no_admin

// check if this is deletion ---
int DeleteApplication
txn OnCompletion
==
bnz execute_action

//---
// check if this is update ---
int UpdateApplication
txn OnCompletion
==
bnz execute_action

// All the other admin actions require at least one arg
// If it is the admin account but 0 args -> admin account as a user
txn NumAppArgs
int 1
>=
bz no_admin

txna ApplicationArgs 0
byte "global-status"
==
bz admin_no_global_status

txn NumAppArgs
int 2
==
bz failed

txna ApplicationArgs 1
btoi

dup
store 4

// GlobalStatus can be 0 or 1
int 0
==
load 4
int 1
==
||
bz failed

// SetGlobalStatus(status)
// 'GlobalStatus' -> status
byte "GlobalStatus"
load 4
app_global_put

int 1
return

admin_no_global_status:

txna ApplicationArgs 0
byte "mint-account"
==
bz admin_no_set_mint_account

txn NumAccounts
int 1
==
bz failed

// SetMintAccount(account)
// 'MintAccount' -> account
byte "MintAccount"
txn Accounts 0
app_global_put

int 1
return




admin_no_set_mint_account:

txna ApplicationArgs 0
byte "status"
==
bz admin_no_status

txn NumAppArgs
int 2
==
bz failed

txn NumAccounts
int 1
==
bz failed

txna ApplicationArgs 1
btoi

dup
store 4

// status can be 0 or 1
int 0
==
load 4
int 1
==
||
bz failed

// SetVaultStatus(Vault Address, status)
// Vault address = Account1, Vault address: 'status' -> status
int 1
byte "status"
load 4
app_local_put

int 1
return

admin_no_status:

// Unknown action, the admin can have a Vault so the admin account is treated as a user account


no_admin:
// test GlobalStatus
load 1
bz failed

// OptIn
int OptIn
txn OnCompletion
==
bnz opt_in

// CloseOut
int CloseOut
txn OnCompletion
==
bnz close_out

txn NumAppArgs
int 1
>=
bz failed

txna ApplicationArgs 0
byte "register"
==
bz no_admin_no_register

txn NumAppArgs
int 2
==
bz failed

// Register(Account owner, Vault address)
byte "Program"
byte base64 ASYBIA==
concat
txn Sender
//addr 4YDUBDLNMVD4SBNKZBVUE6B3KA5BWMRNKAD4SWZZAWNMOCC2S4ZDKRTC24
concat
byte base64 MQAoEg==
concat

//byte base64 ASYBICFkn8x6bwiE3yb+ZFRuEiYT8zVRwtOSDIqxn92F2FaCMwEAKBI=
//concat
sha512_256
txna ApplicationArgs 1
//addr TXT6BQNYL2MVDDUSDKLNPSU6WRYNBI2RSLTCKMU7EUAZSI4XFG5T7TYJV4
==
bz failed

int 0
txn ApplicationID
byte "vault"
app_local_get_ex
// already registered?
bnz failed

// assign the Vault address to the account. It is possible to calculate this address from the account but we may need it. 
int 0
byte "vault"
txna ApplicationArgs 1
app_local_put

int 1
return


no_admin_no_register:
txna ApplicationArgs 0
byte "deposit-algos"
==
bz no_admin_no_deposit

txn NumAppArgs
int 2
==
bz failed

// DepositALGOs(Account owner, Vault address)
int 0
txn ApplicationID
byte "vault"
app_local_get_ex
// registered?
bz failed

// is the same Vault that corresponds to the account
txna ApplicationArgs 1
==
bz failed

// tx1: App DepositALGOs
// tx2: ALGO transfer
global GroupSize
int 2
==
// ApplicationCall
gtxn 0 TypeEnum
int 6
==
&&
// Payment
gtxn 1 TypeEnum
int 1
==
&&

int 0
byte "deposits"
app_local_get

//int 67
gtxn 1 Amount
+
store 4

int 0
byte "deposits"
load 4
app_local_put

int 1
return


no_admin_no_deposit:
// unknown call
int 0
return






failed:
int 0
return
opt_in:
close_out:
finished:
execute_action:
int 1
return